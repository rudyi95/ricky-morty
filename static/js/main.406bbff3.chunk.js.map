{"version":3,"sources":["api/character.ts","api/index.ts","services/characterService.ts","services/storageService.ts","redux/reducers/character.ts","redux/store.ts","App.tsx","index.tsx","redux/reducers/characters.ts"],"names":["BASE_CONNECTION","axios","create","baseURL","characterApi","getById","id","a","get","res","api","getCharacters","dispatch","lsCharacters","storageService","charactersSlice","actions","getCharactersList","getCharacterById","createAsyncThunk","thunkApi","Error","lsSameData","findById","set","data","rejectWithValue","message","clearCharacters","remove","clearById","lsFiltered","filterById","filterData","key","value","localStorage","setItem","JSON","stringify","obj","getItem","parse","error","removeItem","clear","finding","find","item","filtering","filter","initialState","character","undefined","loading","success","characterSlice","createSlice","name","reducers","extraReducers","fulfilled","type","state","action","payload","pending","rejected","rootReducer","combineReducers","characterReducer","charactersReducer","Main","React","lazy","App","store","configureStore","reducer","fallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.406bbff3.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASE_CONNECTION = axios.create({\n  baseURL: \"https://rickandmortyapi.com/api/\",\n});\n\nconst characterApi = {\n  getById: async (id: number) => {\n    const res = await BASE_CONNECTION.get<ICharacter>(`character/${id}`);\n    return res;\n  },\n};\n\nexport default characterApi;\n","import characterApi from \"./character\";\n\nconst api = {\n  ...characterApi,\n};\n\nexport default api;\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport api from \"../api\";\nimport { charactersSlice } from \"../redux/reducers/characters\";\nimport { AppDispatch } from \"../redux/store\";\nimport storageService from \"./storageService\";\n\nexport const getCharacters = () => (dispatch: AppDispatch) => {\n  const lsCharacters = storageService.get<ICharacter[]>(\"characters\");\n  if (lsCharacters) {\n    dispatch(charactersSlice.actions.getCharactersList(lsCharacters));\n  } else {\n    dispatch(charactersSlice.actions.getCharactersList([]));\n  }\n};\n\nexport const getCharacterById = createAsyncThunk(\n  \"character/getCharById\",\n  async (id: number, thunkApi) => {\n    try {\n      if (id > 826) {\n        throw new Error(\"Bad ID\");\n      }\n      const lsCharacters = storageService.get<ICharacter[]>(\"characters\");\n      const lsSameData =\n        lsCharacters && storageService.findById(lsCharacters, id);\n\n      if (lsCharacters && lsSameData) {\n        return lsSameData;\n      } else if (lsCharacters && !lsSameData) {\n        const res = await api.getById(id);\n        storageService.set(\"characters\", [...lsCharacters, res.data]);\n        return res.data;\n      } else {\n        const res = await api.getById(id);\n        storageService.set(\"characters\", [res.data]);\n        return res.data;\n      }\n    } catch (e) {\n      return thunkApi.rejectWithValue((e as Error).message);\n    }\n  }\n);\n\nexport const clearCharacters = () => (dispatch: AppDispatch) => {\n  storageService.remove(\"characters\");\n  dispatch(charactersSlice.actions.clearCharacters());\n};\n\nexport const clearById = (id: number) => (dispatch: AppDispatch) => {\n  const lsCharacters = storageService.get<ICharacter[]>(\"characters\");\n  const lsFiltered =\n    lsCharacters && storageService.filterById(lsCharacters, id);\n  dispatch(charactersSlice.actions.filterData(lsFiltered || []));\n  storageService.set(\"characters\", lsFiltered);\n};\n","const storageService = {\n  set<T>(key: string, value: T) {\n    localStorage.setItem(key, JSON.stringify(value));\n  },\n\n  get<T>(key: string): T | null {\n    const data: any = localStorage.getItem(key);\n\n    if (!data) return null;\n\n    let obj: T | null;\n\n    try {\n      obj = JSON.parse(data) as T;\n    } catch (error) {\n      obj = null;\n    }\n\n    return obj;\n  },\n\n  remove(key: string) {\n    localStorage.removeItem(key);\n  },\n\n  clear() {\n    localStorage.clear();\n  },\n\n  findById<T extends { id: number }>(finding: T[], id: number): T | undefined {\n    const res = finding.find((item: T) => item.id === id);\n    return res;\n  },\n\n  filterById<T extends { id: number }>(filtering: T[], id: number): T[] {\n    const res = filtering.filter((item: T) => item.id !== id);\n    return res;\n  },\n};\n\nexport default storageService;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { getCharacterById } from \"../../services/characterService\";\n\ninterface IProps {\n  character?: ICharacter;\n  loading: boolean;\n  error: string;\n  success: boolean;\n}\n\nexport const initialState: IProps = {\n  character: undefined,\n  loading: false,\n  success: false,\n  error: \"\",\n};\n\nexport const characterSlice = createSlice({\n  name: \"character\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getCharacterById.fulfilled.type]: (\n      state,\n      action: PayloadAction<ICharacter>\n    ) => {\n      state.loading = false;\n      state.error = \"\";\n      state.character = action.payload;\n    },\n    [getCharacterById.pending.type]: (state) => {\n      state.loading = true;\n    },\n    [getCharacterById.rejected.type]: (\n      state,\n      action: PayloadAction<string>\n    ) => {\n      state.loading = false;\n      state.character = undefined;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport default characterSlice.reducer;\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\n\nimport characterReducer from \"./reducers/character\";\nimport charactersReducer from \"./reducers/characters\";\n\nconst rootReducer = combineReducers({\n  characterReducer,\n  charactersReducer,\n});\n\nexport const setupStore = () => {\n  return configureStore({\n    reducer: rootReducer,\n  });\n};\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore[\"dispatch\"];\n","import React, { Suspense } from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport { setupStore } from \"./redux/store\";\n\nimport \"./App.css\";\n\nconst Main = React.lazy(() => import(\"./mainPage\"));\n\nconst App: React.FC = () => {\n  const store = setupStore();\n\n  return (\n    <Provider store={store}>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Main />\n      </Suspense>\n    </Provider>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface IProps {\n  data: ICharacter[];\n  loading: boolean;\n  success: boolean;\n  error: string;\n}\n\nexport const initialState: IProps = {\n  data: [],\n  loading: false,\n  success: false,\n  error: \"\",\n};\n\nexport const charactersSlice = createSlice({\n  name: \"characters\",\n  initialState,\n  reducers: {\n    getCharactersList: (state, action: PayloadAction<ICharacter[]>) => {\n      state.data = action.payload;\n    },\n    clearCharacters: (state) => {\n      state.data = [];\n    },\n    filterData: (state, action: PayloadAction<ICharacter[]>) => {\n      state.data = action.payload;\n    },\n  },\n});\n\nexport default charactersSlice.reducer;\n"],"sourceRoot":""}