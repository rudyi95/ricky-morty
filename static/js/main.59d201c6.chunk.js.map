{"version":3,"sources":["redux/reducer.ts","redux/store.ts","App.tsx","index.tsx","redux/actions/types.ts"],"names":["initialState","results","character","undefined","loading","error","getCharacters","state","payload","getCharacterById","isCharacter","find","item","id","newCharacter","clearCharacters","clearCharacterById","res","filter","errorHandler","loadingHandler","characterReducer","action","type","GET_CHARACTERS","GET_CHARACTER_BY_ID","CLEAR_CHARACTERS","CLEAR_CHARACTER_BY_ID","SET_ERROR","LOADING","store","configureStore","reducer","Main","React","lazy","App","fallback","ReactDOM","render","document","getElementById"],"mappings":"mPAWMA,EAAkC,CACtCC,QAAS,GACTC,eAAWC,EACXC,SAAS,EACTC,WAAOF,GAGHG,EAAgB,SAACC,EAA0BC,GAG/C,OAFAD,EAAK,2BAAQA,GAAR,IAAeN,QAAQ,GAAD,mBAAMM,EAAMN,SAAZ,CAAqBO,OAK5CC,EAAmB,SAACF,EAA0BC,GAClD,IAAME,GAAeC,IAAKJ,EAAMN,SAAS,SAACW,GAAD,OAAUA,EAAKC,KAAOL,EAAQK,MACjEC,EAAY,sBAAOP,EAAMN,SAAb,CAAsBO,IAQxC,OAPAD,EAAK,2BACAA,GADA,IAEHN,QAASS,EAAcI,EAAeP,EAAMN,QAC5CC,UAAWM,EACXH,WAAOF,KAMLY,EAAkB,SAACR,GAEvB,OADQP,GAIJgB,EAAqB,SAACT,EAA0BC,GACpD,IAAMS,EAAMC,iBAAOX,EAAMN,SAAS,SAACW,GAAD,OAAUA,EAAKC,KAAOL,KAGxD,OAFAD,EAAK,2BAAQA,GAAR,IAAeN,QAASgB,EAAKf,eAAWC,KAKzCgB,EAAe,SAACZ,EAA0BC,GAM9C,OALAD,EAAK,2BACAP,GADA,IAEHC,QAASM,EAAMN,QACfI,MAAOG,KAKLY,EAAiB,SAACb,EAA0BC,GAEhD,OADAD,EAAK,2BAAQA,GAAR,IAAeH,QAASI,KAgChBa,EA5BU,WAA6C,IAA5Cd,EAA2C,uDAA9BP,EAAcsB,EAAgB,uCAC3DC,EAAkBD,EAAlBC,KAAMf,EAAYc,EAAZd,QAEd,OAAQe,GACN,KAAKC,IACH,OAAOlB,EAAcC,EAAOC,GAE9B,KAAKiB,IACH,OAAOhB,EAAiBF,EAAOC,GAEjC,KAAKkB,IACH,OAAOX,IAET,KAAKY,IACH,OAAOX,EAAmBT,EAAOC,GAEnC,KAAKoB,IACH,OAAOT,EAAaZ,EAAOC,GAE7B,KAAKqB,IACH,OAAOT,EAAeb,EAAOC,GAE/B,QACE,OAAOD,IClFAuB,EAAQC,YAAe,CAClCC,QAASX,I,gBCCLY,EAAOC,IAAMC,MAAK,kBAAM,uDAUfC,EARO,kBACpB,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,WAAD,CAAUO,SAAU,6CAApB,SACE,cAACJ,EAAD,SCPNK,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U,+BCJjD,gNAAMjB,EAAiB,iBACjBC,EAAsB,sBACtBC,EAAmB,mBACnBC,EAAwB,wBACxBC,EAAY,YACZC,EAAU,Y","file":"static/js/main.59d201c6.chunk.js","sourcesContent":["import {\n  CLEAR_CHARACTERS,\n  CLEAR_CHARACTER_BY_ID,\n  GET_CHARACTERS,\n  GET_CHARACTER_BY_ID,\n  LOADING,\n  SET_ERROR,\n} from \"./actions/types\";\nimport find from \"lodash/find\";\nimport { filter } from \"lodash\";\n\nconst initialState: ICharacterReducer = {\n  results: [],\n  character: undefined,\n  loading: false,\n  error: undefined,\n};\n\nconst getCharacters = (state: ICharacterReducer, payload: any) => {\n  state = { ...state, results: [...state.results, payload] };\n\n  return state;\n};\n\nconst getCharacterById = (state: ICharacterReducer, payload: any) => {\n  const isCharacter = !find(state.results, (item) => item.id === payload.id);\n  const newCharacter = [...state.results, payload];\n  state = {\n    ...state,\n    results: isCharacter ? newCharacter : state.results,\n    character: payload,\n    error: undefined,\n  };\n\n  return state;\n};\n\nconst clearCharacters = (state: ICharacterReducer) => {\n  state = initialState;\n  return state;\n};\n\nconst clearCharacterById = (state: ICharacterReducer, payload: any) => {\n  const res = filter(state.results, (item) => item.id !== payload);\n  state = { ...state, results: res, character: undefined };\n\n  return state;\n};\n\nconst errorHandler = (state: ICharacterReducer, payload: any) => {\n  state = {\n    ...initialState,\n    results: state.results,\n    error: payload,\n  };\n  return state;\n};\n\nconst loadingHandler = (state: ICharacterReducer, payload: any) => {\n  state = { ...state, loading: payload };\n  return state;\n};\n\nconst characterReducer = (state: any = initialState, action: any) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_CHARACTERS: {\n      return getCharacters(state, payload);\n    }\n    case GET_CHARACTER_BY_ID: {\n      return getCharacterById(state, payload);\n    }\n    case CLEAR_CHARACTERS: {\n      return clearCharacters(state);\n    }\n    case CLEAR_CHARACTER_BY_ID: {\n      return clearCharacterById(state, payload);\n    }\n    case SET_ERROR: {\n      return errorHandler(state, payload);\n    }\n    case LOADING: {\n      return loadingHandler(state, payload);\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default characterReducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport characterReducer from \"./reducer\";\n\nexport const store = configureStore({\n  reducer: characterReducer,\n});\n","import React, { Suspense } from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./redux/store\";\n\nimport \"./App.css\";\nconst Main = React.lazy(() => import(\"./mainPage\"));\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Main />\n    </Suspense>\n  </Provider>\n);\n\nexport default App;\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","const GET_CHARACTERS = \"GET_CHARACTERS\";\nconst GET_CHARACTER_BY_ID = \"GET_CHARACTER_BY_ID\";\nconst CLEAR_CHARACTERS = \"CLEAR_CHARACTERS\";\nconst CLEAR_CHARACTER_BY_ID = \"CLEAR_CHARACTER_BY_ID\";\nconst SET_ERROR = \"SET_ERROR\";\nconst LOADING = \"LOADING\";\n\nexport {\n  GET_CHARACTERS,\n  GET_CHARACTER_BY_ID,\n  CLEAR_CHARACTERS,\n  CLEAR_CHARACTER_BY_ID,\n  SET_ERROR,\n  LOADING,\n};\n"],"sourceRoot":""}